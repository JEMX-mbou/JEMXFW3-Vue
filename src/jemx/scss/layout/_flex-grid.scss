@use 'sass:math';

@use '../utils/function/conf';
@use '../utils/function/spacer';
@use '../utils/function/list';

// Base flex styling
.flex,
.row,
.col,
[class^='col-'],
[class*=' col-'] {
  position: relative;
  display: flex;
}

// Flex-wrap classes
.fw-wrap {
  flex-wrap: wrap;
}
.fw-nowrap {
  flex-wrap: nowrap;
}

// Flex-direction classes
.fd-row {
  flex-direction: row;
}
.fd-row-r {
  flex-direction: row-reverse;
}
.fd-column {
  flex-direction: column;
}
.fd-column-r {
  flex-direction: column-reverse;
}

// Justify-content classes
.jc-initial {
  justify-content: initial;
}
.jc-inherit {
  justify-content: inherit;
}
.jc-flex-start {
  justify-content: flex-start;
}
.jc-flex-end {
  justify-content: flex-end;
}
.jc-center {
  justify-content: center;
}
.jc-space-between {
  justify-content: space-between;
}
.jc-space-around {
  justify-content: space-around;
}
.jc-space-evenly {
  justify-content: space-evenly;
}

// Align-content classes
.ac-initial {
  align-content: initial;
}
.ac-inherit {
  align-content: inherit;
}
.ac-flex-start {
  align-content: flex-start;
}
.ac-flex-end {
  align-content: flex-end;
}
.ac-center {
  align-content: center;
}
.ac-space-between {
  align-content: space-between;
}
.ac-space-around {
  align-content: space-around;
}
.ac-space-evenly {
  align-content: space-evenly;
}
.ac-stretch {
  align-content: stretch;
}

// Align-items clasess
.ai-baseline {
  align-items: baseline;
}
.ai-initial {
  align-items: initial;
}
.ai-inherit {
  align-items: inherit;
}
.ai-flex-start {
  align-items: flex-start;
}
.ai-flex-end {
  align-items: flex-end;
}
.ai-center {
  align-items: center;
}
.ai-stretch {
  align-items: stretch;
}

// Row class styling
.row {
  width: 100%;
  flex-wrap: wrap;

  > * {
    flex-shrink: 0;
  }
}

// Base column styling.
[class^='col-'],
[class*=' col-'],
.col {
  padding: math.div(conf.get('layout.grid.gutter'), 2);
  flex-direction: column;

  > * {
    display: flex;
    width: 100%;
    padding: math.div(conf.get('layout.grid.gutter'), 2);
    flex-direction: column;
    flex-wrap: wrap;
  }
}

// Make base column class fill the available width of the row.
.col {
  flex: 1;
}

// Make the column classes use the appointed width.
[class^='col-'],
[class*=' col-'] {
  flex: 0 0 auto;
}

// Declaring col-width-map variable. Used for column width values.
$column-widths: ();

// For-loop for generating base column classes.
// Default column number is 12, found in config/_size.scss
// Width is added to col-width-map to be used.
@for $i from 1 through conf.get('layout.grid.columns') {
  // Column width is calculated
  $column-width: math.div(100%, math.div(conf.get('layout.grid.columns'), $i));
  // Column width is prepended to column-width list
  $column-widths: list.prepend($column-widths, $column-width);

  // Base column width class is set.
  .col-#{$i} {
    width: $column-width;
  }
}

// Foreach-loop for generating media-queries based on screensizes.
// Screensizes are found in config/_size.scss
// Prefixes are: s, m, l, xl and xxl by default.
// Screenwidths are: 576, 768, 992, 1200, 1400
@each $prefix, $size in conf.get('layout.breakpoint') {
  @media (min-width: $size) {
    // Media-query based on screenwidth.

    // For-loop for generating column classes for screensizes.
    // Example: col-s-6 or col-xl-8
    @for $i from 1 through conf.get('layout.grid.columns') {
      .col-#{$prefix}-#{$i} {
        width: nth(
          $column-widths,
          conf.get('layout.grid.columns') - $i + 1
        ); // Column width class for screensize is set.
      }
    }
  }
}
